{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useRowStyles","makeStyles","root","borderBottom","zepra","backgroundColor","createData","name","calories","fat","carbs","protein","price","Row","props","row","React","useState","open","setOpen","classes","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","Fragment","TableRow","className","TableCell","style","width","IconButton","aria-label","size","onClick","component","scope","align","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Table","TableBody","variant","rows","CollapsibleTable","rowsPerPage","setRowsPerPage","page","setPage","TableContainer","Paper","TableHead","map","key","TablePagination","rowsPerPageOptions","count","length","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","value","Boolean","window","location","hostname","match","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6421b9b.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport Paper from \"@material-ui/core/Paper\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\n\nconst mobileScreen = \"sm\";\n\nconst useRowStyles = makeStyles({\n  root: {\n    \"& > *\": {\n      borderBottom: \"unset\",\n    },\n  },\n  zepra:{\n    '&:nth-of-type(4n+1)': {\n      backgroundColor: '#f5f5f5',\n    },\n  }\n});\n\nfunction createData(name, calories, fat, carbs, protein, price) {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein,\n    price,\n  };\n}\n\nfunction Row(props) {\n  const { row } = props;\n  const [open, setOpen] = React.useState(false);\n  const classes = useRowStyles();\n\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(mobileScreen));\n\n  return (\n    <React.Fragment>\n      <TableRow className={classes.root + \" \" + classes.zepra}>\n        {isMobile && (\n          <TableCell style={{width: '70px'}}>  \n            <IconButton\n              aria-label=\"expand row\"\n              size=\"small\"\n              onClick={() => setOpen(!open)}\n            >\n              {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n            </IconButton>\n          </TableCell>\n        )}\n        <TableCell component=\"th\" scope=\"row\">\n          {row.name}\n        </TableCell>\n        <TableCell align=\"right\">{row.calories}</TableCell>\n        {!isMobile && (\n          <React.Fragment>\n            <TableCell align=\"right\">{row.fat}</TableCell>\n            <TableCell align=\"right\">{row.carbs}</TableCell>\n            <TableCell align=\"right\">{row.protein}</TableCell>\n            <TableCell align=\"right\">{row.price}</TableCell>\n          </React.Fragment>\n        )}\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={7}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableBody>\n                  <TableRow className={classes.root}>\n                    <TableCell variant=\"head\" component=\"th\" scope=\"col\">\n                      Fat (g)\n                    </TableCell>\n                    <TableCell>{row.fat}</TableCell>\n                  </TableRow>\n                  <TableRow className={classes.root}>\n                    <TableCell variant=\"head\" component=\"th\" scope=\"row\">\n                      Carbs (g)\n                    </TableCell>\n                    <TableCell>{row.carbs}</TableCell>\n                  </TableRow>\n                  <TableRow className={classes.root}>\n                    <TableCell variant=\"head\" component=\"th\" scope=\"row\">\n                      Protein (g)\n                    </TableCell>\n                    <TableCell>{row.protein}</TableCell>\n                  </TableRow>\n                  <TableRow className={classes.root}>\n                    <TableCell variant=\"head\" component=\"th\" scope=\"row\">\n                      Price\n                    </TableCell>\n                    <TableCell>{row.price}</TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nRow.propTypes = {\n  row: PropTypes.shape({\n    calories: PropTypes.number.isRequired,\n    carbs: PropTypes.number.isRequired,\n    fat: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired,\n    protein: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nconst rows = [\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0, 3.99),\n  createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3, 4.99),\n  createData(\"Eclair\", 262, 16.0, 24, 6.0, 3.79),\n  createData(\"Cupcake\", 305, 3.7, 67, 4.3, 2.5),\n  createData(\"Gingerbread\", 356, 16.0, 49, 3.9, 1.5),\n  createData(\"Frozen yoghurts\", 159, 6.0, 24, 4.0, 3.99),\n  createData(\"Ice cream sandwichs\", 237, 9.0, 37, 4.3, 4.99),\n  createData(\"Eclairs\", 262, 16.0, 24, 6.0, 3.79),\n  createData(\"Cupcakes\", 305, 3.7, 67, 4.3, 2.5),\n  createData(\"Gingerbreads\", 356, 16.0, 49, 3.9, 1.5),\n];\n\nexport default function CollapsibleTable() {\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [page, setPage] = React.useState(0);\n\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(mobileScreen));\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table aria-label=\"collapsible table\">\n          <TableHead>\n            <TableRow>\n              {isMobile && <TableCell />}\n              <TableCell>Dessert (100g serving)</TableCell>\n              <TableCell align=\"right\">Calories</TableCell>\n              {!isMobile && (\n                <React.Fragment>\n                  <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n                  <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n                  <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n                  <TableCell align=\"right\">Price&nbsp;</TableCell>\n                </React.Fragment>\n              )}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <Row key={row.name} row={row} />\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 25]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nReactDOM.render(\n  <React.Fragment>\n    <CssBaseline />\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}